def bipartite(graph):
    n = len(graph.keys())
    colors = [-1] * n
    for start in range(n):
        if colors[start] == -1:
            queue = [start]
            colors[start] = 0
            while queue:
                u = queue.pop(0)
                for v in graph[u]:
                    if colors[v] == -1:
                        colors[v] = 1 - colors[u]
                        queue.append(v)
                    elif colors[v] == colors[u]:
                        return False, []
    set1 = [i for i in range(n) if colors[i] == 0]
    set2 = [i for i in range(n) if colors[i] == 1]
    return True, (set1, set2)
def kuhn(graph):
    n = len(graph.keys())
    match = [-1] * n
    visited = [False] * n
    is_bipartite, parts = bipartite(graph)
    chapter = parts[0]
    def dfs(v):
        for u in graph[v]:
            if not visited[u]:
                visited[u] = True
                if match[u] == -1 or dfs(match[u]):
                    match[u] = v
                    return True
        return False
    max_matching = 0
    for v in chapter:
        visited = [False] * n
        if dfs(v):
            max_matching += 1
    return match, max_matching
def coating(graph):
    match, _ = kuhn(graph)
    n = len(graph.keys())
    visited = [False] * n
    chapter = bipartite(graph)[1][0]
    def dfs(v):
        for u in graph[v]:
            if not visited[u]:
                visited[u] = True
                if match[u] == -1 or dfs(match[u]):
                    match[u] = v
        for u in graph[v]:
            if not visited[u] and (match[u] == -1 or not visited[match[u]]):
                dfs(u)
    for v in chapter:
        if match[v] == -1:
            dfs(v)
    coating_set = [i for i in chapter if visited[i]] + [v for v in range(n) if v not in visited and match[v] != -1]
    return coating_set
print(coating(G))
